cmake_minimum_required(VERSION 3.6)
project(abilityLite C CXX)

# If CMAKE_BUILD_TYPE was not specified, default to release.
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE release)
endif ()
if (NOT SANITIZE_TYPE)
    set(SANITIZE_TYPE address)
endif ()
if (NOT ENV_BIT)
    set(ENV_BIT 32)
endif()
string(TOLOWER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE)

# compiler flags
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_SKIP_INSTALL_RPATH TRUE)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -fsigned-char -ftree-vectorize -funroll-loops -Wno-unused-variable")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c17 -fsigned-char -ftree-vectorize -funroll-loops -Wno-unused-variable")
if (CMAKE_BUILD_TYPE MATCHES debug)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O0 -Wall -fno-omit-frame-pointer -fno-stack-protector")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0 -Wall -fno-omit-frame-pointer -fno-stack-protector")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ftest-coverage -fprofile-arcs --coverage")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ftest-coverage -fprofile-arcs --coverage")
    if (SANITIZE_TYPE MATCHES address)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fsanitize=leak -fsanitize-address-use-after-scope")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address -fsanitize=leak -fsanitize-address-use-after-scope")
    elseif (SANITIZE_TYPE MATCHES thread)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread") # unsupported i386
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=thread") # unsupported i386
        add_compile_definitions(__M64__)
        set(ENV_BIT 64)
    elseif (SANITIZE_TYPE MATCHES undefined)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-sanitize-recover=all")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=undefined -fno-sanitize-recover=all")
    else()
        # no sanitize
    endif ()
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -Wall -fPIE")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 -Wall -fPIE")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -s")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -s")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fPIE")
endif ()
if (ENV_BIT MATCHES 64)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
endif()
# define
add_compile_definitions(__LITEOS_M__ TASK_STACK_SIZE=65536 AMS_TASK_STACK_SIZE=32768 NATIVE_TASK_STACK_SIZE=32768 _MINI_BMS_)
if ((DEFINED PRODUCT) AND (PRODUCT MATCHES ARCHIMEDES))
    # do nothing
else ()
    add_compile_definitions(_MINI_MULTI_TASKS_)
endif ()
enable_testing()

# ability_lite
set(ABILITY_LITE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
# interfaces
set(ABILITY_LITE_INTERFACES_KITS_ABILITY_LITE_DIR "${ABILITY_LITE_DIR}/interfaces/kits/ability_lite")
set(ABILITY_LITE_INTERFACES_KITS_ABILITY_LITE_INCLUDE_DIR "${ABILITY_LITE_INTERFACES_KITS_ABILITY_LITE_DIR}")
set(ABILITY_LITE_INTERFACES_KITS_ABILITY_LITE_SLITE_INCLUDE_DIR "${ABILITY_LITE_INTERFACES_KITS_ABILITY_LITE_DIR}/slite")
set(ABILITY_LITE_INTERFACES_KITS_WANT_LITE_DIR "${ABILITY_LITE_DIR}/interfaces/kits/want_lite")
set(ABILITY_LITE_INTERFACES_KITS_WANT_LITE_INCLUDE_DIR "${ABILITY_LITE_INTERFACES_KITS_WANT_LITE_DIR}")
set(ABILITY_LITE_INTERFACES_INNER_API_DIR "${ABILITY_LITE_DIR}/interfaces/inner_api/abilitymgr_lite")
set(ABILITY_LITE_INTERFACES_INNER_API_INCLUDE_DIR "${ABILITY_LITE_INTERFACES_INNER_API_DIR}")
set(ABILITY_LITE_INTERFACES_INNER_API_SLITE_INCLUDE_DIR "${ABILITY_LITE_INTERFACES_INNER_API_DIR}/slite")
# frameworks
set(ABILITY_LITE_FRAMEWORKS_ABILITY_LITE_DIR "${ABILITY_LITE_DIR}/frameworks/ability_lite")
set(ABILITY_LITE_FRAMEWORKS_ABILITY_LITE_SRC_DIR "${ABILITY_LITE_FRAMEWORKS_ABILITY_LITE_DIR}/src/slite")
set(ABILITY_LITE_FRAMEWORKS_ABILITYMGR_LITE_DIR "${ABILITY_LITE_DIR}/frameworks/abilitymgr_lite")
set(ABILITY_LITE_FRAMEWORKS_ABILITYMGR_LITE_DIR_INCLUDE_DIR "${ABILITY_LITE_FRAMEWORKS_ABILITYMGR_LITE_DIR}/include/slite")
set(ABILITY_LITE_FRAMEWORKS_ABILITYMGR_LITE_SRC_DIR "${ABILITY_LITE_FRAMEWORKS_ABILITYMGR_LITE_DIR}/src/slite")
set(ABILITY_LITE_FRAMEWORKS_WANT_LITE_DIR "${ABILITY_LITE_DIR}/frameworks/want_lite")
set(ABILITY_LITE_FRAMEWORKS_WANT_LITE_INCLUDE_DIR "${ABILITY_LITE_FRAMEWORKS_WANT_LITE_DIR}/include")
set(ABILITY_LITE_FRAMEWORKS_WANT_LITE_SRC_DIR "${ABILITY_LITE_FRAMEWORKS_WANT_LITE_DIR}/src")
# services
set(ABILITY_LITE_SERVICES_DIR "${ABILITY_LITE_DIR}/services/abilitymgr_lite")
set(ABILITY_LITE_SERVICES_SRC_DIR "${ABILITY_LITE_SERVICES_DIR}/src/slite")
set(ABILITY_LITE_SERVICES_INCLUDE_DIR "${ABILITY_LITE_SERVICES_DIR}/include/slite")
set(ABILITY_LITE_SERVICES_UTIL_INCLUDE_DIR "${ABILITY_LITE_SERVICES_DIR}/include/util")

add_subdirectory(test/slite)
